@model IEnumerable<WriteData.Javaobject>
@{
    ViewData["Title"] = "Skidata";
}

<script type="text/javascript">
	window.onload = function () {
		//initial value of dataPoints
	    var dps = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model) as string);

	    var chart = new CanvasJS.Chart("chartContainer",{
	        animationEnabled: true,
			title: { text: "Antal åk/timma" },
			axisY: { suffix: ""	},
            axisX: { suffix: ":00"},
			legend :{
				verticalAlign: 'bottom',
				horizontalAlign: "center"
			},
			data: [
			{
				type: "column",
				bevelEnabled: false,
				indexLabel: "{y}",
				dataPoints: dps
			}
			]
		});
		var updateInterval = 1000;
		var updateChart = function () {
		    chart.render();
		};
		updateChart();
	}
</script>
<script type="text/javascript" src="~/js/canvasjs.min.js"></script>

<section id="features">
    <div class="container">
        <div class="row">
            <div class="features-icon">
                <h2><img src="~/images/logos/myskistarlogo.png" /> <small>...so long so far..</small></h2>
            </div>
        </div><!--/.row-->
    </div><!--/.container-->
</section><!--/#services-->
<div class="container">
    <div class="navbar navbar-default">
        <div class="dropdown navbar-form">
            <form class="navbar-form navbar-right" asp-controller="Home" asp-action="Skidata" method="get">
                @Html.DropDownList("dropdownDates", (SelectList)ViewBag.dropdownDates, "All", new { @class = "btn btn-default dropdown-toggle", data_toggle = "dropdown" })
                <button type="submit" class="btn btn-primary">Hämta graf</button>
            </form>
        </div>
    </div>
</div>
    <div class="container">
        <div class="row">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-xs-3">
                        <i class="fa fa-comments fa-5x"></i>
                    </div>
                    <div class="col-xs-9 owl-item text-right">
                        <span class="badge-success">Total meters</span><div class="huge"></div>
                        <span class="badge-prog">Prog. meters</span><div class="huge"></div>
                        <div><span class="badge">End of day at 15:30</span></div>
                    </div>
                </div>
            </div>
        <div class="col-lg-4">
            <div class="panel panel-body">
                <div class="panel-heading">
                    <h4 class="panel-title">Panel title</h4>
                </div>
                <div class="panel-body">
                    <div class="features-item center-block">
                        @await Component.InvokeAsync(nameof(RideProg), "12:00")
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-body">
                <div class="panel-heading">
                    <h4 class="panel-title">Panel title</h4>
                </div>
                <div class="panel-body">
                    <div class="features-item center-block">
                        @await Component.InvokeAsync(nameof(RideProg), "14:30")
                    </div>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="panel panel-body">
                <div class="panel-heading">
                    <h4 class="panel-title">Panel title</h4>
                </div>
                <div class="panel-body">
                    <div class="features-item center-block">
                        @await Component.InvokeAsync(nameof(RideProg), "16:30")
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<section>
    <div class="container">
        <div class="row">
            <div id="chartContainer" style="height: 300px; width: 100%;">
            </div>
        </div>
    </div>
</section>

    




